- name: Create nifi group
  group:
    name: "{{ nifi_group }}"
    state: present

- name: Create nifi user
  user:
    name: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Add nifi user to docker group
  shell: usermod -aG docker {{ nifi_user }}
  become: yes

- name: Create directory for nifi
  file:
    path: "{{ nifi_home_dir }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Create nifi internals directories
  file:
    path: "{{ nifi_home_dir }}/data/{{ item }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
  loop:
    - content_repository
    - database_repository
    - flowfile_repository
    - logs
    - provenance_repository
    - state

- name: Add nifi docker compose
  template:
    src: docker-compose.yml.j2
    dest: "{{ nifi_home_dir }}/docker-compose.yml"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Check if bootstrap needed
  stat:
    path: "{{ nifi_home_dir }}/bootstrapped"
  register: p

- name: Bootstrap nifi
  include_tasks: bootstrap.yml
  when: not p.stat.exists

- name: Add authorizations.xml
  when: nifi_single_user_mode == false
  template:
    src: authorizations.xml.j2
    dest: "{{ nifi_data_dir }}/conf/authorizations.xml"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Add users.xml
  when: nifi_single_user_mode == false
  template:
    src: users.xml.j2
    dest: "{{ nifi_data_dir }}/conf/users.xml"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Add authorizers.xml
  when: nifi_single_user_mode == false
  template:
    src: authorizers.xml.j2
    dest: "{{ nifi_data_dir }}/conf/authorizers.xml"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Create truststore and keystore
  shell: 'docker run apache/nifi-toolkit:latest -v {{ nifi_home_dir }}/nifi_certs:/opt/certs ---entrypoint "bash -c /opt/nifi-toolkit/*/bin/tls-toolkit.sh standalone -O --subjectAlternativeNames {{ nifi_name }},localhost -o /opt/certs -n {{ nifi_name }} -P truststorepass -K keystorepass -S keystorepass; chown -R nifi:nifi /opt/certs"'

- name: Make tmp cert dir
  file:
    path: /tmp/ansible-nifi-certs
    state: directory

- name: Copy tmp certs
  loop: "{{ nifi_users }}"
  copy:
    src: "{{ item.cert }}"
    dest: "/tmp/ansible-nifi-certs/{{ item.cert }}"

- name: Add users to truststore
  loop: "{{ nifi_users }}"
  shell: "docker run -v /tmp/ansible-nifi-certs:/tmp/ansible-nifi-certs -v {{ nifi_home_dir }}/nifi_certs:/opt/certs openjdk keytool -noprompt -import -file /tmp/ansible-nifi-certs/{{ item.cert }} -alias {{ item.alias }} -keystore /opt/certs/nifi-0/truststore.jks -storepass {{ nifi_truststore_password }}"
  ignore_errors: true

- name: Create nifi network
  shell: "docker network create {{ nifi_network }} || true"
  ignore_errors: true

- name: Start nifi
  shell: "docker compose -f {{ nifi_home_dir }}/docker-compose.yml up -d --force-recreate --remove-orphans"

- name: Add backup.sh
  template:
    src: backup.sh.j2
    dest: "{{ nifi_home_dir }}/backup.sh"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Add restore.sh
  template:
    src: restore.sh.j2
    dest: "{{ nifi_home_dir }}/restore.sh"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Add get_shell
  template:
    src: get_shell.sh.j2
    dest: "{{ nifi_home_dir }}/get_shell.sh"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Message
  debug:
    msg: IMPORTANT -- set the nifi_root_pg_id variable for correct permissions
